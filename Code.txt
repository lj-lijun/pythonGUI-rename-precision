# utf - 8
# 李军：chang'an university 
# 邮箱：2352481248@qq.com

import datetime
import os
import sys
import tkinter as tk
from tkinter import ttk
import tkinter.messagebox as tk_box
from tkinter import filedialog
import shutil
from PIL import ImageTk, Image
import webbrowser
from tkinter import scrolledtext

class mainpage:
    def __init__(self, root):
        self.master=root
        self.master.title ( 'Rename' )
        screen_width=self.master.winfo_screenwidth ()
        screen_height=self.master.winfo_screenheight ()
        width=720
        height=400
        window_size=f'{width}x{height}+{round ( (screen_width - width) / 2 )}+{round ( (screen_height - height) / 2 )}'  # round去掉小数
        self.master.geometry ( window_size )

        self.year = tk.StringVar ()
        self.doy = tk.StringVar ()
        self.gpsweek = tk.StringVar()
        self.path = tk.StringVar()
        self.save_path = tk.StringVar()


        self.prefix = tk.StringVar()
        self.buffix = tk.StringVar()
        self.start = tk.StringVar()
        self.end = tk.StringVar()
        # 设置默认值
        self.prefix.set('wum')
        self.buffix.set('.sp3')
        self.start.set(12)
        self.end.set(18)

        self.gpsweek_list = []

        self.creat_page ()
        self.create_menu()

    def creat_page(self):
        tk.Label ( self.master, text='GPSweek', bg='grey', font=('楷体', 10) ).grid ( row=0, column=2, padx=5, pady=10)
        ttk.Label ( self.master, text='year:' ).grid ( row=1, column=1, pady=3, padx=10 )
        tk.Entry ( self.master, textvariable=self.year ).grid ( row=1, column=2, pady=3, padx=5 )

        ttk.Label ( self.master, text='doy:' ).grid ( row=2, column=1, pady=5, padx=10 )
        tk.Entry ( self.master, textvariable=self.doy ).grid ( row=2, column=2, pady=3, padx=5 )

        ttk.Button ( self.master, text='calculate', command=self.year_doy ).grid ( row=4, column=2, pady=3)
        tk.Label ( self.master, text='gpsweek:' ).grid ( row=5, column=1, pady=5 )
        tk.Entry ( self.master, textvariable=self.gpsweek ).grid ( row=5, column=2, pady=3 )

        tk.Label(self.master, text='RenameSetting', bg='grey', font=('楷体', 10)).grid(row=6, column=2, padx=5, pady=2, )

        tk.Label(self.master, text='prefix:').grid(row=7, column=1, pady=3)
        tk.Entry(self.master, textvariable=self.prefix).grid(row=7, column=2, pady=3)

        tk.Label(self.master, text='buffix:').grid(row=8, column=1, pady=5)
        tk.Entry(self.master, textvariable=self.buffix).grid(row=8, column=2, pady=3)

        tk.Label(self.master, text='start:').grid(row=9, column=1, pady=5)
        tk.Entry(self.master, textvariable=self.start).grid(row=9, column=2, pady=3)

        tk.Label(self.master, text='end:').grid(row=10, column=1, pady=5)
        tk.Entry(self.master, textvariable=self.end).grid(row=10, column=2, pady=3)

        tk.Label(self.master, text='Type:').grid(row=11, column=1)
        self.combo = ttk.Combobox(self.master)
        self.combo['values'] = ('Precision','Broadcast/Other')
        self.combo.current(0)
        self.combo.grid(row=11, column=2)


        # 布局Treeview表格
        tk.Label ( self.master, text='精密星历重命名', bg='grey', font=('楷体', 10) ).grid ( row=0,columnspan=9,  padx=3, pady=10)
        columns=('0', '1')
        self.tree_view=ttk.Treeview ( self.master, show="headings", columns=columns, height=13 )
        self.tree_view.grid ( row=1, column=5, columnspan=5, rowspan=10 )
        self.VScroll=ttk.Scrollbar ( self.master, orient='vertical', command=self.tree_view.yview )  # 创建滚动条
        self.tree_view.configure ( yscrollcommand=self.VScroll.set )  # 滚动条与表格控件关联
        self.VScroll.grid ( row=1, column=10, rowspan=10, sticky='ns' )  # 滚动条放置位置
        tk.Label ( self.master, text=' ' ).grid ( row=1, column=4 )

        self.tree_view.column ( '0', width=300, anchor='center' )
        self.tree_view.column ( '1', width=160, anchor='center' )

        self.tree_view.heading ( '0', text='oldname' )
        self.tree_view.heading ( '1', text='newname' )


        ttk.Button ( self.master, text='Open_file', command=self.open_file ).grid ( row=11, column=5, pady=2 )
        ttk.Button ( self.master, text='Preview', command=self.preview ).grid ( row=11, column=6, pady=2 )
        ttk.Button(self.master, text='Save_path', command=self.save_data).grid(row=11, column=7, pady=2)
        ttk.Button ( self.master, text='Rename', command=self.translate ).grid ( row=11, column=8, pady=2 )


        ttk.Label(self.master, text='Workpath:').grid(row=12, column=5, pady=5)
        tk.Entry(self.master, textvariable=self.path).grid(row=12, column=6, pady=3)

        ttk.Label(self.master, text='Savepath:').grid(row=12, column=7, pady=5)
        tk.Entry(self.master, textvariable=self.save_path).grid(row=12, column=8, pady=3)

    def create_menu(self):
        menubar = tk.Menu(self.master)
        self.help_tool=tk.Menu ( menubar, tearoff=False )
        menubar.add_cascade(label='help', menu=self.help_tool)

        self.help_tool.add_command(label='handbook', command=self.handbook)
        self.help_tool.add_command(label='about', command=self.about)
        self.help_tool.add_command(label='IGS_center', command=self.URL)
        self.master['menu'] = menubar  # 将菜单绑定到页面

    def open_file(self):
        folderpath = filedialog.askdirectory()  # 获得选择好的文件夹
        self.path.set ( folderpath )
        file_list = os.listdir( folderpath)
        count=len(file_list)
        self.tree_view.delete ( *self.tree_view.get_children () )  # 清空原先表格
        for i in range ( 0, count, 1 ):
            old=file_list[i]
            self.tree_view.insert('', 'end', values=[old])

    def preview(self):
        self.tree_view.delete(*self.tree_view.get_children())
        folderpath = self.path.get()
        file_list = os.listdir(folderpath)
        count = len(file_list)
        for i in range(0, count, 1):
            file = file_list[i]
            start = int(self.start.get())
            end = int(self.end.get())
            prefix = self.prefix.get()
            buffix = self.buffix.get()

            yr = file[start - 1:start + 3]
            dy = file[start + 3:end]
            type = self.combo.get()
            try:
                if type == 'Precision':
                    time = doy2datetime(int(yr), int(dy))
                    gpsweek = datetime2GnssTime(time)
                    newname1 = prefix + str(gpsweek[2]) + buffix
                    self.tree_view.insert('', 'end', values=[file, newname1])
                elif type == 'Broadcast/Other':
                    newname2 = prefix + str(file[start - 1:end]) + buffix
                    self.tree_view.insert('', 'end', values=[file, newname2])
            except:
                key = tk_box.showwarning(title='错误',message='There may be a field interception error of start or end!Click OK to exit the process')
                print(key)
                if key == 'ok':
                    sys.exit(0)
    def save_data(self):
        out_path = filedialog.askdirectory()  # 选择输出文件夹
        self.save_path.set(out_path)

    def translate(self):
        path_1=self.path.get ()
        file_list = os.listdir(path_1)
        count = len(file_list)
        for i in range(0, count, 1):
            file = file_list[i]
            start = int(self.start.get())
            end = int(self.end.get())
            prefix = self.prefix.get()
            buffix = self.buffix.get()
            type = self.combo.get()

            yr = file[start - 1:start + 3]
            dy = file[start + 3:end]
            #time = doy2datetime(int(yr), int(dy))
            #gpsweek = datetime2GnssTime(time)
            out_path = self.save_path.get()
            oldname_path = os.path.join(path_1,file)
            print(oldname_path)
            try:
                if type == 'Precision':
                    time = doy2datetime(int(yr), int(dy))
                    gpsweek = datetime2GnssTime(time)
                    newname1 = prefix + str(gpsweek[2]) + buffix
                    newname_path1 = os.path.join(path_1,newname1)
                    print(newname_path1)
                    shutil.copy2(oldname_path,newname_path1)

                elif type == 'Broadcast/Other':
                    newname2 = prefix + str(file[start - 1:end]) + buffix
                    newname_path2 = os.path.join(out_path,newname2)
                    shutil.copy2(oldname_path, newname_path2)

            except:
                key = tk_box.showwarning(title='错误',message='There may be a field interception error of start or end!Click OK to exit the process')
                print(key)
                if key == 'ok':
                    sys._exit(0)

    def year_doy(self):
        year = self.year.get()
        doy = self.doy.get()
        specTime = doy2datetime(int(year), int(doy))
        gpsweek = datetime2GnssTime(specTime)
        week = gpsweek[2]
        self.gpsweek.set(str(week))


    def handbook(self):
        win = tk.Toplevel()
        win.geometry('300x400')
        win.maxsize(300, 400)
        win.minsize(300, 400)
        win.title('Software Manual')
        win.attributes('-alpha', 0.90)
        tk.Label(win, text='Manual', font=("宋体", 10), fg='red').pack()
        scr = scrolledtext.ScrolledText(win, width=100, height=400,
                                        font=("Arial", 10))  # 滚动文本框（宽，高（这里的高应该是以行数为单位），字体样式）
        scr.pack()  # 滚动文本框在页面的位置
        with open('handbook.txt', mode='r', encoding='utf-8') as rfile:
            for line in rfile:
                scr.insert('end', line)  # 末尾插入

    def URL(self):
        webbrowser.open("http://123.57.209.195/index.php/home/data_product/igs.html")

    def about(self):

        win = tk.Toplevel()
        win.geometry('300x400')
        win.maxsize(400, 200)
        win.minsize(400, 200)
        win.title('Software information')
        win.attributes('-alpha', 0.90)
        # win.image_file = Image.open("弹窗.jfif")
        # win.photo = ImageTk.PhotoImage(win.image_file)
        # image = tk.Label(win, image=win.photo)
        # image.grid(row=0, column=0, columnspan=20)
        tk.Label(win, text='Ver： v1.0.0.0', font=("宋体", 10), fg='red').grid(row=1, column=0, sticky='w')
        tk.Label(win, text='Tool： Python tkinter libraries', font=("宋体", 10), fg='blue').grid(row=2, column=0, pady=4,
                                                                                     sticky='w')
        tk.Label(win, text='Time： 2023/4/19', font=("宋体", 10), fg='blue').grid(row=3, column=0, pady=4,
                                                                                    sticky='w')
        tk.Label(win, text='Author：', font=("宋体", 10), fg='blue').grid(row=4, column=0, pady=4, sticky='w')
        tk.Label(win, text='Name：lijun-Chang an University', font=("宋体", 10), fg='blue').grid(row=5, column=0, pady=3, sticky='w')
        tk.Label(win, text='Email：2452481258@qq.com', font=("宋体", 10), fg='blue').grid(row=6, column=0, pady=4, sticky='w')
        link = tk.Label(win, text='Code:  https://github.com/lj-lijun/pythonGUI-rename-precision.git', font=('Arial', 10), fg='red')
        link.grid(row=7, column=0, sticky='w')

        def open_url(event):
            webbrowser.open("https://github.com/lj-lijun/pythonGUI-rename-precision.git", new=0)

        link.bind("<Button-1>", open_url)

def doy2datetime(year, doy):
    """
    2022.09.30 : year doy -> datetime | by ChangChuntao -> Version : 1.00
    eg:
    输入：2023 092
    输出：2023-04-02 00:00:00
    """
    import datetime
    day1Time = datetime.datetime(year, 1, 1)
    specTime = day1Time + datetime.timedelta(days=int(doy) - 1)
    return specTime

def datetime2GnssTime(specTime):
    """
    2022-04-30 : datetime转GNSS TIME并输出  | by Chang Chuntao  -> Version : 1.12
    eg：
    输入：2023-04-02 00:00:00
    """
    YearMonthDay = [specTime.year, specTime.month, specTime.day]
    gpsWeekdDelTime = specTime - datetime.datetime(year=1980, month=1, day=6)
    gpsWeek = gpsWeekdDelTime.days // 7
    gpsWeekD = gpsWeekdDelTime.days - gpsWeek * 7
    week = str(gpsWeek) + str(gpsWeekD)
    GPSWeekDay = [gpsWeek, gpsWeekD, week]
    return GPSWeekDay


if __name__ == '__main__':
    root=tk.Tk ()
    mainpage ( root )
    root.mainloop ()