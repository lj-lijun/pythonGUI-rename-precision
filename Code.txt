# utf - 8
# 李军：chang'an university 
# 邮箱：2352481248@qq.com

# utf-8
# lijun

import datetime
import os
import tkinter as tk
import tkinter.messagebox as tk_box
from tkinter import filedialog
import shutil
import webbrowser
from tkinter import scrolledtext
import ttkbootstrap as ttk


class mainpage:
    def __init__(self, root):
        self.master=root
        self.master.title ( 'Rename v1.0.0' )
        screen_width=self.master.winfo_screenwidth ()
        screen_height=self.master.winfo_screenheight ()
        width=890
        height=450
        self.master.maxsize(890, 450)
        self.master.minsize(890, 450)

        window_size=f'{width}x{height}+{round ( (screen_width - width) / 2 )}+{round ( (screen_height - height) / 2 )}'  # round去掉小数
        self.master.geometry ( window_size )

        self.year = tk.StringVar ()
        self.doy = tk.StringVar ()
        self.gpsweek = tk.StringVar()
        self.path = tk.StringVar()
        self.save_path = tk.StringVar()

        self.prefix = tk.StringVar()
        self.buffix = tk.StringVar()
        self.start = tk.StringVar()
        self.end = tk.StringVar()

        self.prefix.set('wum')
        self.buffix.set('.sp3')
        self.start.set(12)
        self.end.set(18)

        self.gpsweek_list = []

        self.creat_page ()
        self.create_menu()

    def creat_page(self):
        tk.Label ( self.master, text='-------GPSweek-------', font=("Arial", 10) ).grid ( row=0, column=2, padx=5)
        ttk.Label ( self.master, text='year:' ).grid ( row=1, column=1, pady=3, padx=10 )
        tk.Entry ( self.master, textvariable=self.year ).grid ( row=1, column=2, pady=3, padx=5 )

        ttk.Label ( self.master, text='doy:' ).grid ( row=2, column=1, pady=5, padx=10 )
        tk.Entry ( self.master, textvariable=self.doy ).grid ( row=2, column=2, pady=3, padx=5 )

        ttk.Button ( self.master, text='calculate', command=self.year_doy ).grid ( row=4, column=2, pady=3)
        tk.Label ( self.master, text='gpsweek:' ).grid ( row=5, column=1, pady=5 )
        tk.Entry ( self.master, textvariable=self.gpsweek ).grid ( row=5, column=2, pady=3 )

        tk.Label(self.master, text='----Rename Setting----', bg='grey', font=("Arial",10)).grid(row=6, column=2, padx=5, pady=5, )

        tk.Label(self.master, text='prefix:').grid(row=7, column=1, pady=5)
        tk.Entry(self.master, textvariable=self.prefix).grid(row=7, column=2, pady=5)

        tk.Label(self.master, text='buffix:').grid(row=8, column=1, pady=5)
        tk.Entry(self.master, textvariable=self.buffix).grid(row=8, column=2, pady=5)

        tk.Label(self.master, text='start:').grid(row=9, column=1, pady=5)
        tk.Entry(self.master, textvariable=self.start).grid(row=9, column=2, pady=5)

        tk.Label(self.master, text='end:').grid(row=10, column=1, pady=5)
        tk.Entry(self.master, textvariable=self.end).grid(row=10, column=2, pady=5)

        tk.Label(self.master, text='Type:').grid(row=11, column=1, pady=5)
        self.combo = ttk.Combobox(self.master)
        self.combo['values'] = ('Precision','Broadcast/Other')
        self.combo.current(0)
        self.combo.grid(row=11, column=2)

        columns=('0', '1')
        self.tree_view=ttk.Treeview ( self.master, show="headings", columns=columns, height=15 )
        self.tree_view.grid ( row=1, column=5, columnspan=5, rowspan=10 )
        self.VScroll=ttk.Scrollbar ( self.master, orient='vertical', command=self.tree_view.yview )  # 创建滚动条
        self.tree_view.configure ( yscrollcommand=self.VScroll.set )
        self.VScroll.grid ( row=1, column=10, rowspan=10, sticky='ns' )
        tk.Label ( self.master, text=' ' ).grid ( row=1, column=4 )

        self.tree_view.column ( '0', width=380, anchor='center' )
        self.tree_view.column ( '1', width=180, anchor='center' )

        self.tree_view.heading ( '0', text='Old_name' )
        self.tree_view.heading ( '1', text='New_name' )

        ttk.Button ( self.master, text='Open_file', command=self.open_file ).grid ( row=11, column=5, pady=3 )
        ttk.Button ( self.master, text=' Preview ', command=self.preview ).grid ( row=11, column=6, pady=3 )
        ttk.Button(self.master, text='Save_path', command=self.save_data).grid(row=11, column=7, pady=3)
        ttk.Button ( self.master, text=' Rename ', command=self.translate ).grid ( row=11, column=8, pady=2 )

        ttk.Label(self.master, text='Workpath:').grid(row=12, column=5, pady=5)
        tk.Entry(self.master, textvariable=self.path).grid(row=12, column=6, pady=3)

        ttk.Label(self.master, text='Savepath:').grid(row=12, column=7, pady=5)
        tk.Entry(self.master, textvariable=self.save_path).grid(row=12, column=8, pady=3)

    def create_menu(self):
        menubar = tk.Menu(self.master)
        self.help_tool=tk.Menu ( menubar, tearoff=False )
        menubar.add_cascade(label='Help', menu=self.help_tool,font=("TkDefaultFont",10))

        self.help_tool.add_command(label='handbook', command=self.handbook)
        self.help_tool.add_command(label='about', command=self.about)
        self.help_tool.add_command(label='IGS_center', command=self.URL)
        self.master['menu'] = menubar
#
    def open_file(self):
        folderpath = filedialog.askdirectory()
        self.path.set ( folderpath )
        file_list = os.listdir( folderpath)
        count=len(file_list)
        self.tree_view.delete ( *self.tree_view.get_children () )
        for i in range ( 0, count, 1 ):
            old=file_list[i]
            self.tree_view.insert('', 'end', values=[old])

    def preview(self):
        self.tree_view.delete(*self.tree_view.get_children())
        folderpath = self.path.get()
        file_list = os.listdir(folderpath)
        count = len(file_list)
        for i in range(0, count, 1):
            file = file_list[i]
            start = int(self.start.get())
            end = int(self.end.get())
            prefix = self.prefix.get()
            buffix = self.buffix.get()

            yr = file[start - 1:start + 3]
            dy = file[start + 3:end]
            type = self.combo.get()
            try:
                if type == 'Precision':
                    time = doy2datetime(int(yr), int(dy))
                    gpsweek = datetime2GnssTime(time)
                    newname1 = prefix + str(gpsweek[2]) + buffix
                    self.tree_view.insert('', 'end', values=[file, newname1])
                elif type == 'Broadcast/Other':
                    newname2 = prefix + str(file[start - 1:end]) + buffix
                    self.tree_view.insert('', 'end', values=[file, newname2])
            except:
                key = tk_box.showwarning(title='Error',message='There may be a field interception error of start or end!Click OK to exit the process')
                print(key)
                if key == 'ok':
                    os._exit(0)
    def save_data(self):
        out_path = filedialog.askdirectory()
        self.save_path.set(out_path)

    def translate(self):
        path_1=self.path.get ()
        file_list = os.listdir(path_1)
        count = len(file_list)
        for i in range(0, count, 1):
            file = file_list[i]
            start = int(self.start.get())
            end = int(self.end.get())
            prefix = self.prefix.get()
            buffix = self.buffix.get()
            type = self.combo.get()

            yr = file[start - 1:start + 3]
            dy = file[start + 3:end]
            out_path = self.save_path.get()
            oldname_path = os.path.join(path_1,file)
            try:
                if type == 'Precision':
                    time = doy2datetime(int(yr), int(dy))
                    gpsweek = datetime2GnssTime(time)
                    newname1 = prefix + str(gpsweek[2]) + buffix
                    newname_path1 = os.path.join(out_path,newname1)
                    shutil.copy2(oldname_path,newname_path1)
                elif type == 'Broadcast/Other':
                    newname2 = prefix + str(file[start - 1:end]) + buffix
                    newname_path2 = os.path.join(out_path,newname2)
                    shutil.copy2(oldname_path, newname_path2)

            except:
                key = tk_box.showwarning(title='Error',message='There may be a field interception error of start or end!Click OK to exit the process')
                if key == 'ok':
                    os._exit(0)
        tk_box.showinfo(title='Tips',message='All file conversions are renamed complete!!!')

    def year_doy(self):
        year = self.year.get()
        doy = self.doy.get()
        try:
            specTime = doy2datetime(int(year), int(doy))
            gpsweek = datetime2GnssTime(specTime)
            week = gpsweek[2]
            self.gpsweek.set(str(week))
        except:
            key = tk_box.showwarning(title='Error',message='Input error!!!')
            print(key)
            if key == 'ok':
                os._exit(0)

    def handbook(self):
        win = tk.Toplevel()
        win.geometry('420x400')
        win.maxsize(420, 400)
        win.minsize(420, 400)
        win.title('Software Manual')
        win.attributes('-alpha', 0.95)
        ttk.Label(win, text='Manual', font=("等线", 12)).pack()
        scr = scrolledtext.ScrolledText(win, width=420, height=400,
                                        font=("Courier New", 8))
        scr.pack()
        self.txt = '''
        rename小工具的简易说明文档
    详细文档见本人Github仓库中的手册
    第一部分
    # -------------GPSweek------------ #
      year：<输入年，eg：2023>
      doy： <输入年积日，eg：092或者92>
    # -----------calculate------------ #
      gpsweek: <输出GPS周，eg：22560>

    第二部分
    # ------------重命名设置------------ #
    重命名设置：
      prefix：<自定义前缀，eg：brdc/igr ...>
      buffix：<自定义后缀，eg：.23n/.sp3 ...>
      start：  <自定义从何处开始截取原始文件名>
      start：  <自定义到何处停止截取原始文件名>
      Type：  <选择重命名文件类型>
    Type有两个选项：Precision 和 Broadcast/Other
    #------------Precision-------------#
      精密星历重命名需要根据截取的字符串求出年
    和年积日，再由程序计算出GPS周进行重命名，
    因此在输入start和end时不能出现截取到字符
    的情况，因为字符无法转为数值，一旦有错误，
    程序会直接退出，请特别注意！！！

    eg：
      WUM0MGXRAP_20230910000_01D_01M_ORB.SP3
      ==>wum22556.sp3

    #---------Broadcast/Other--------#
       广播星历，直接根据年积日即可重命名，截取
    的字符串即为重命名时的字符串，无需计算.

    eg:
      BRDM00DLR_S_20230810000_01D_MN.rnx
      ==>wum0810.23n

      Openfile：   <选择批量重命名文件的文件夹>
      Preview：     预览，核对是否正确
      Save_path： <选择输入文件夹，避免覆盖>
      Rename：    点击即可完成重命名
      Workpath： 显示打开的文件夹路径
      Savepath：  显示输出的文件夹路径

    #------------help---------------#
    该部分有三个内容：
      handbook：打开即可看见该手册
      about：源码位置，作者信息
      IGS_center：点击直接打开IGS数据中心
            '''
        for line in self.txt:
            scr.insert('end',line)

    def URL(self):
        webbrowser.open("http://123.57.209.195/index.php/home/data_product/igs.html")

    def about(self):

        win = tk.Toplevel()
        win.geometry('300x400')
        win.maxsize(400, 200)
        win.minsize(400, 200)
        win.title('Software information')
        win.attributes('-alpha', 0.95)
        tk.Label(win, text='Ver： v1.0.0', font=("Arial", 8), fg='red').grid(row=1, column=0, sticky='w')
        tk.Label(win, text='Tool： Python tkinter libraries', font=("Arial", 8), fg='blue').grid(row=2, column=0, pady=4,
                                                                                     sticky='w')
        tk.Label(win, text='Time： 2023/4/19', font=("Arial", 8), fg='blue').grid(row=3, column=0, pady=4,
                                                                                    sticky='w')
        tk.Label(win, text='Author：', font=("Arial", 8), fg='blue').grid(row=4, column=0, pady=4, sticky='w')
        tk.Label(win, text='Name：李 军', font=("Arial", 8), fg='blue').grid(row=5, column=0, pady=3, sticky='w')
        tk.Label(win, text='Email：2452481258@qq.com', font=("Arial", 8), fg='blue').grid(row=6, column=0, pady=4, sticky='w')
        link = tk.Label(win, text='Code:  https://github.com/lj-lijun/pythonGUI-rename-precision.git', font=('Arial', 8))
        link.grid(row=7, column=0, sticky='w')

        def open_url(event):
            webbrowser.open("https://github.com/lj-lijun/pythonGUI-rename-precision.git", new=0)
        link.bind("<Button-1>", open_url)


def doy2datetime(year, doy):
    import datetime
    day1Time = datetime.datetime(year, 1, 1)
    specTime = day1Time + datetime.timedelta(days=int(doy) - 1)
    return specTime

def datetime2GnssTime(specTime):
    YearMonthDay = [specTime.year, specTime.month, specTime.day]
    gpsWeekdDelTime = specTime - datetime.datetime(year=1980, month=1, day=6)
    gpsWeek = gpsWeekdDelTime.days // 7
    gpsWeekD = gpsWeekdDelTime.days - gpsWeek * 7
    week = str(gpsWeek) + str(gpsWeekD)
    GPSWeekDay = [gpsWeek, gpsWeekD, week]
    return GPSWeekDay


if __name__ == '__main__':
    root=ttk.Window ()
    mainpage ( root )
    root.mainloop ()
